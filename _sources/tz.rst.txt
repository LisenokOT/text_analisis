Техническое задание
==================================

Введение
--------------------------------------------
| Появление сети Интернет и бурный рост доступной текстовой информации значительно ускорило развитие научной области, существующей уже много десятков лет и известной как автоматическая обработка текстов и компьютерная лингвистика. В рамках этой области предложено много перспективных идей по автоматической обработке текстов на естественном языке, которые были воплощены во многих прикладных системах, в том числе коммерческих. Сфера приложений компьютерной лингвистики постоянно расширяется, появляются все новые задачи, которые успешно решаются, в том числе с привлечением результатов смежных научных областей.
|
Основания для разработки
--------------------------------------------
| Основанием для разработки данного ПО послужило задание для вузовских дисциплин «Основы интеллектуального анализа данных» и «Технологии разработки программного обеспечения».
|
Назначение разработки
--------------------------------------------
| Назначение данного ПО заключается в автоматической рубрикации текстов, полученных как из текстового файла, так и введенный в терминал.
|
Требование к программе
--------------------------------------------
| Для работы данного ПО необходим установленный Python версии 3.7 и выше, а также установленная библиотека Hunspell. Для добавления новых тем необходимо подключение к интернету.
|
Требования к программной документации
--------------------------------------------
| Для создания документации необходимо установить Python модули sphinx и sphinx_rtd_theme, а также утилита Make.
|
Стадии и этапы разработки
--------------------------------------------
| Этапы проекта в соответствии с каскадной моделью:
| **1.	Формирование требований**
| По заданному тексту на русском языке программа должна выдавать ответ - к какой тематике с большей вероятностью следует отнести текст. (например, физика, биология, история, искусство и т. п.). список тематик задается в настройках программы. Выбор классифицирующего алгоритма - на усмотрение разработчика. Выбор входных параметров алгоритма - на усмотрение разработчика (например, по частоте встречаемости слов).
| **2.	Проектирование**
| Для проекта необходимо использовать монолитная архитектура, где  все компоненты программы содержатся в одном приложении.
| **3.	Реализация**
| Для реализации архитектуры необходимо использовать паттерн Singleton, который обеспечивает создание единственного экземпляра объекта приложения
| **4.	Тестирование**
| Тестирование необходимо реализовать с помощью модуля Python – Pytest.
| **5.	Внедрение**
| Для внедрения необходимо создавать, устанавливаемый с помощью pip, архив приложения.
| **6.	Эксплуатация**
| Для обучения пользователя необходимо реализовать вывод помощи через команду --help.
|
Документация
=======================================================
Спецификация
--------------------------------------------
| Система автоматической рубрикации текста – система определяющая к какой тематике с большей вероятностью следует отнести текст. Система хранит темы с массивом ключевых слов для дальнейшей проверки соответствия текста к каждой тематике.
|
Программа и методика испытаний
--------------------------------------------
| Для тестирования ПО используется pytest проверяющий работоспособность всего функционала используя тестовые данные.
|
Описание программы
--------------------------------------------
| TextAnalysis – ПО для автоматической рубрикации текста на Python. На вход программы подается текст и на выходе отображается список тем и их процентное соотношение.
|
Описание применения
--------------------------------------------
| Пользователь может запустить обработку текста указав ссылку на файл с текстом или введя его в консоль.
| Пользователь может добавлять, удалять и отображать темы, сохраненные в словарь тем. Для всех команд есть  возможность указать свой файл словаря тем.
|
Описание языка
--------------------------------------------
| Python – высокоуровневый язык программирования общего назначения с динамической строгой типизацией и автоматическим управлением памятью, ориентированный на повышение производительности разработчика, читаемости кода и его качества, а также на обеспечение переносимости написанных на нём программ.
