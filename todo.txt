1. Разработать систему автоматической рубрикации текстов

По заданному тексту на русском языке программа должна выдавать ответ - к какой тематике с большей вероятностью следует отнести текст.
(например, физика, биология, история, искусство и т.п.). список тематик задается в настройках программы.
Выбор классифицтрующего алгоритма - на усмотрение разработчика. Выбор входных параметров алгоритма - на усмотрение разработчика (например, по частоте встречаемости слов)
Можно использовать сторонние библиотеки для разбора текста с учетом морфологии языка (например, Hunspell)


- сделать ТЗ, используются: монолитная архитектура, жизн цикл - последовательная модель (водопад)

- UML? Class Component Deployment Usecase Action Sequence State Communication

- паттерн Document-View
Класс View
inputData(): void
show(Document): void
Класс Document
changeData(): void
getData(): void

- Рефакторинг (включить линтеры питона) <- статический анализ

- Отладка (с помощью vscode)

- Логирование

- Профайлер? (запуск с помощью
import cProfile
cProfile.run('code')
)

- Документация в соответствии с ЕСПД (есть готовый sphinx)


- В лекциях куча приемов с классами которые могут не пригодиться

ТЗ:
- введение;
- основания для разработки;
- назначение разработки;
- требования к программе или программному изделию;
- требования к программной документации;
- технико-экономические показатели;
- стадии и этапы разработки;
- порядок контроля и приемки;
- в техническое задание допускается включать приложения.

Документация
Техническое задание.
Спецификация.
Программа и методика испытаний.
Текст программы.
Описание программы.
Ведомость держателей подлинников.
Пояснительная записка.
Формуляр.
Описание применения.
Руководство системного программиста.
Руководство программиста.
Руководство оператора.
Описание языка.
Ведомость эксплуатационных документов.
Руководство по техническому обслуживанию.